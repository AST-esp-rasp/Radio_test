{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport WebService from \"@/services/WebService\";\nexport default {\n  data: () => ({\n    radios: [],\n    hover: false\n  }),\n  computed: {},\n  methods: {\n    // a computed getter\n    cardStyle: function (item) {\n      // `this` points to the vm instance\n      var result = [];\n      if (this.isSelected(item.stationuuid)) result.push('selected');\n      if (this.isPlaying(item.stationuuid)) result.push('pulsate');\n      return result;\n    },\n    play: function (item) {\n      var id = item.stationuuid;\n      var url = item.url_resolved;\n\n      // set new radio\n      var player = this.$store.state.musicPlayer;\n      var result = this.$store.state.activeRadio;\n      if (this.isPlaying(id)) {\n        player.stop();\n        result.active = false;\n        result.error = false;\n        this.$store.commit('setActiveRadio', result);\n      } else {\n        result.active = false;\n        result.id = id;\n        result.url = url;\n        result.name = item.name;\n        result.error = false;\n        this.$store.commit('setActiveRadio', result);\n        player.play(url).then(playResult => {\n          // we ignore old requsts\n          if (playResult.url == this.$store.state.activeRadio.url) {\n            result.active = playResult.playing;\n            result.error = !playResult.playing;\n            this.$store.commit('setActiveRadio', result);\n          }\n        }, error => {\n          result.active = false;\n          result.error = true;\n          this.$store.commit('setActiveRadio', result);\n          console.error(error);\n        }).catch(e => {\n          result.active = false;\n          result.error = true;\n          this.$store.commit('setActiveRadio', result);\n          console.log(e);\n        });\n      }\n    },\n    getRadios(field, value) {\n      var temp = this.$store.state.radios[field + value];\n      if (temp != null) {\n        this.radios = temp;\n        this.$store.commit('setLoading', false);\n      } else {\n        this.$store.commit('setLoading', true);\n        const ws = new WebService();\n        ws.getRadios(field, value).then(result => {\n          this.radios = result.data.filter(rec => rec.lastcheckok == 1 && !this.$store.state.blacklist.includes(rec.stationuuid)).sort((c1, c2) => c2.clickcount - c1.clickcount);\n          this.$store.commit('setRadios', {\n            id: field + value,\n            value: this.radios\n          });\n          this.$store.commit('setLoading', false);\n        }).catch(error => {\n          console.error(error);\n          this.$store.commit('setLoading', false);\n        });\n      }\n    },\n    isSelected(id) {\n      return this.$store.state.activeRadio.id == id;\n    },\n    isPlaying(id) {\n      return this.$store.state.activeRadio.active && this.$store.state.activeRadio.id == id;\n    }\n  },\n  mounted() {\n    this.$store.commit('setLoading', true);\n    var searchTerm = this.$router.currentRoute.params['id'] === undefined ? \"blues\" : this.$router.currentRoute.params.id;\n    var field = this.$router.currentRoute.name == 'Genre' ? 'tag' : 'countrycode';\n    this.getRadios(field, searchTerm);\n  }\n};","map":{"version":3,"mappings":";AAuDA;AAEA;EACAA;IACAC;IACAC;EACA;EAEAC,WAEA;EAEAC;IACA;IACAC;MACA;MACA;MACA,uCACAC;MACA,sCACAA;MACA;IACA;IAEAC;MACA;MACA;;MAEA;MACA;MACA;MACA;QACAC;QACAF;QACAA;QACA;MACA;QACAA;QACAA;QACAA;QACAA;QACAA;QACA;QACAE;UACA;UACA;YACAF;YACAA;YACA;UACA;QACA;UACAA;UACAA;UACA;UACAG;QACA;UACAH;UACAA;UACA;UACAG;QACA;MACA;IACA;IAEAC;MACA;MACA;QACA;QACA;MAEA;QACA;QACA;QACAC;UACA,0BACAC,8FACAC;UAEA;YAAAC;YAAAC;UAAA;UACA;QAEA;UACAN;UACA;QACA;MACA;IACA;IAEAO;MACA;IACA;IAEAC;MACA;IACA;EACA;EAEAC;IACA;IACA;IACA;IACA;EACA;AACA","names":["data","radios","hover","computed","methods","cardStyle","result","play","player","console","getRadios","ws","filter","sort","id","value","isSelected","isPlaying","mounted"],"sourceRoot":"src/views","sources":["Radios.vue"],"sourcesContent":["<!--\n    Copyright 2020 Phil Schatzmann\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n-->\n\n<template>\n    <v-container fluid>\n            <v-row>\n                <v-col  v-for=\"item in this.radios\" :key=\"item.stationuuid\" >\n                    <v-hover  v-slot:default=\"{ hover }\" close-delay=\"200\">\n                        <v-card outlined tiled class=\"mx-auto\" v-bind:class=\"cardStyle(item)\" max-width=\"200px\" :elevation=\"hover ? 16 : 2\" @click.native=\"play(item)\">\n\n                            <v-img \n                                :src=\"item.favicon\"\n                                height=\"200px\"\n                                width=\"200px\">\n\n                                <template v-slot:placeholder>\n                                    <v-row\n                                    class=\"fill-height ma-0\"\n                                    align=\"center\"\n                                    justify=\"center\"\n                                    >\n                                    <v-img\n                                        :src=\"require('@/assets/radio.svg')\"\n                                        height=\"200px\"\n                                        width=\"200px\"/>\n\n                                    </v-row>\n                                </template>\n\n                            </v-img>\n                            <v-card-text v-text=\"item.name\">\n                            </v-card-text>\n                        </v-card>\n                    </v-hover>\n                </v-col>\n            </v-row>\n\n    </v-container>\n</template>\n\n<script>\n    import WebService from \"@/services/WebService\"\n\n    export default {\n        data: () => ({\n            radios: [],\n            hover: false,\n        }),\n\n        computed: {\n\n        },\n\n        methods: {\n            // a computed getter\n            cardStyle: function (item) {\n            // `this` points to the vm instance\n                var result = []\n                if (this.isSelected(item.stationuuid))\n                    result.push('selected')\n                if (this.isPlaying(item.stationuuid))\n                    result.push('pulsate')\n                return result;\n            },\n\n            play: function (item) {\n                var id =   item.stationuuid\n                var url = item.url_resolved\n\n                // set new radio\n                var player = this.$store.state.musicPlayer;\n                var result = this.$store.state.activeRadio\n                if (this.isPlaying(id)) {\n                    player.stop();\n                    result.active = false;\n                    result.error = false\n                    this.$store.commit('setActiveRadio', result );\n                } else {\n                    result.active = false\n                    result.id = id\n                    result.url = url\n                    result.name = item.name\n                    result.error = false\n                    this.$store.commit('setActiveRadio', result );\n                    player.play(url).then(playResult => {\n                        // we ignore old requsts\n                        if (playResult.url == this.$store.state.activeRadio.url){\n                            result.active = playResult.playing;\n                            result.error = !playResult.playing\n                            this.$store.commit('setActiveRadio', result );\n                        }\n                    }, error => {\n                        result.active = false;\n                        result.error = true\n                        this.$store.commit('setActiveRadio', result );\n                        console.error(error)\n                    }).catch(e => {\n                        result.active = false;\n                        result.error = true\n                        this.$store.commit('setActiveRadio', result );\n                        console.log(e);\n                    });\n                }\n            },\n\n            getRadios(field, value){\n                var temp = this.$store.state.radios[field+value]\n                if (temp!=null){\n                    this.radios = temp;\n                    this.$store.commit('setLoading', false);\n\n                } else {\n                    this.$store.commit('setLoading', true);\n                    const ws = new WebService()\n                    ws.getRadios(field, value).then(result => {\n                        this.radios = result.data\n                            .filter(rec => rec.lastcheckok==1 && !this.$store.state.blacklist.includes(rec.stationuuid))\n                            .sort((c1, c2) => c2.clickcount - c1.clickcount)\n\n                        this.$store.commit('setRadios', {id:field+value, value:this.radios});\n                        this.$store.commit('setLoading', false);\n\n                    }).catch(error => {\n                        console.error(error)\n                        this.$store.commit('setLoading', false);\n                    })\n                }\n            },\n\n            isSelected(id){\n                return this.$store.state.activeRadio.id==id\n            },\n\n            isPlaying(id){\n                return this.$store.state.activeRadio.active && this.$store.state.activeRadio.id==id\n            }\n        },\n\n        mounted() {\n            this.$store.commit('setLoading', true);\n            var searchTerm = this.$router.currentRoute.params['id']=== undefined ? \"blues\": this.$router.currentRoute.params.id;\n            var field = this.$router.currentRoute.name == 'Genre' ? 'tag' : 'countrycode'\n            this.getRadios(field, searchTerm);\n        },\n    }\n\n</script>\n\n<style>\n    .v-card {\n        cursor: pointer;\n    }\n\n    .selected {\n        background-color: darkgrey;\n    }\n\n    .pulsate {\n        animation: pulse 1s infinite;\n    }\n\n    @keyframes pulse {\n        0% {\n            background-color: lightgrey;\n        }\n        100% {\n            background-color: black;\n        }\n    }\n\n</style>"]},"metadata":{},"sourceType":"module"}