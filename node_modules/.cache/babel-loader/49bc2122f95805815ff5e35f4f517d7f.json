{"ast":null,"code":"import WebService from '@/services/WebService';\nexport default {\n  data: () => ({\n    ws: {\n      heap: null,\n      ssid: 'not defined',\n      streaming: true,\n      bluetooth: false,\n      bluetooth_name: 'not defined'\n    },\n    errors: {\n      streaming: null,\n      bluetooth: null\n    },\n    timer: ''\n  }),\n  methods: {\n    changeStreaming() {\n      this.$store.commit('setMusicPlayer', 1);\n      new WebService().postStreaming(this.ws.streaming, '').then(result => {\n        console.log(result);\n        this.ws = result.data;\n        this.errors.streaming = \"\";\n        // when we are streaming we use the ESP player implementation\n      }).catch(error => {\n        console.error(error);\n        this.ws.streaming = !this.ws.streaming;\n        this.errors.streaming = \"Streaming Service failed\";\n      });\n    },\n    changeBT() {\n      this.$store.commit('setMusicPlayer', 0);\n      new WebService().postBluetooth(this.ws.bluetooth).then(result => {\n        console.log(result);\n        this.ws = result.data;\n        this.errors.bluetooth = \"\";\n      }).catch(error => {\n        this.ws.bluetooth = !this.ws.bluetooth;\n        console.error(error);\n        this.errors.bluetooth = \"Bluetooth Service failed\";\n      });\n    },\n    getInfo() {\n      new WebService().getInfo().then(result => {\n        console.log(result);\n        this.ws = result.data;\n        this.$store.commit('setLoading', false);\n      }).catch(error => {\n        this.$store.commit('setLoading', false);\n        console.error(error);\n      });\n    },\n    cancelAutoUpdate() {\n      clearInterval(this.timer);\n    }\n  },\n  created() {\n    this.getInfo();\n    this.timer = setInterval(this.getInfo, 5000);\n  },\n  beforeDestroy() {\n    clearInterval(this.timer);\n  }\n};","map":{"version":3,"mappings":"AAyCA;AAEA;EAEAA;IACAC;MACAC;MACAC;MACAC;MACAC;MACAC;IACA;IACAC;MACAH;MACAC;IACA;IACAG;EAEA;EAEAC;IACAC;MACA;MACA;QACAC;QACA;QACA;QACA;MACA;QACAA;QACA;QACA;MACA;IACA;IAEAC;MACA;MACA;QACAD;QACA;QACA;MACA;QACA;QACAA;QACA;MACA;IACA;IAEAE;MACA;QACAF;QACA;QACA;MACA;QACA;QACAA;MACA;IACA;IACAG;MACAC;IACA;EAEA;EAEAC;IACA;IACA;EACA;EAEAC;IACAF;EACA;AACA","names":["data","ws","heap","ssid","streaming","bluetooth","bluetooth_name","errors","timer","methods","changeStreaming","console","changeBT","getInfo","cancelAutoUpdate","clearInterval","created","beforeDestroy"],"sourceRoot":"src/views","sources":["Setup.vue"],"sourcesContent":["<!--\n    Copyright 2020 Phil Schatzmann\n\n    This program is free software: you can redistribute it and/or modify\n    it under the terms of the GNU General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program.  If not, see <https://www.gnu.org/licenses/>.\n-->\n\n<template>\n    <v-container fluid>\n        <v-layout justify-space-around fill-height>\n            <v-flex xs11>\n                <v-card hover>\n                    <v-card-title>\n                        <h2>Setup</h2>\n                    </v-card-title>\n                    <v-card-text >\n                        <v-text-field label=\"Available Heap\" readonly=true v-model=\"ws.heap\" />\n                        <v-text-field label=\"SSID\" readonly=true v-model=\"ws.ssid\" />\n                        <v-text-field label=\"Bluetooth Name\" readonly=true v-model=\"ws.bluetooth_name\" />\n                        <v-text-field label=\"Music Player\" readonly=true :value=\"$store.state.musicPlayer.getName()\" /> \n                        <v-switch label=\"Streaming\" @change=\"changeStreaming()\" :error-messages=\"errors.streaming\"  v-model=\"ws.streaming\" />\n                        <v-switch label=\"Bluetooth\" @change=\"changeBT()\"  :error-messages=\"errors.bluetooth\" v-model=\"ws.bluetooth\" />\n                    </v-card-text>\n                </v-card>\n            </v-flex>\n\n        </v-layout>\n    </v-container>\n</template>\n\n<script>\nimport WebService from '@/services/WebService'\n\nexport default {\n    \n        data: () => ({      \n            ws: {       \n                heap: null,\n                ssid: 'not defined',\n                streaming: true,\n                bluetooth: false,\n                bluetooth_name: 'not defined'\n            },\n            errors: {\n                streaming: null,\n                bluetooth: null,\n            },\n            timer: ''\n\n        }),\n\n        methods: {\n            changeStreaming() {\n                this.$store.commit('setMusicPlayer', 1);\n                new WebService().postStreaming(this.ws.streaming, '' ).then(result => {\n                    console.log(result);\n                    this.ws = result.data\n                    this.errors.streaming = \"\"\n                    // when we are streaming we use the ESP player implementation\n                }).catch(error => {\n                    console.error(error);\n                    this.ws.streaming = !this.ws.streaming;\n                    this.errors.streaming = \"Streaming Service failed\"\n                })\n            },\n            \n            changeBT() {\n                this.$store.commit('setMusicPlayer', 0);\n                new WebService().postBluetooth(this.ws.bluetooth ).then(result => {\n                    console.log(result);\n                    this.ws = result.data\n                    this.errors.bluetooth = \"\"\n                }).catch(error => {\n                    this.ws.bluetooth = !this.ws.bluetooth;\n                    console.error(error);\n                    this.errors.bluetooth = \"Bluetooth Service failed\"\n                })\n            },\n\n            getInfo() {\n                new WebService().getInfo().then(result => {\n                    console.log(result);\n                    this.ws = result.data\n                    this.$store.commit('setLoading', false);\n                }).catch(error => {\n                    this.$store.commit('setLoading', false);\n                    console.error(error);\n                })\n            },\n            cancelAutoUpdate () { \n                clearInterval(this.timer)\n            }\n            \n        },\n\n        created () {\n            this.getInfo();\n            this.timer = setInterval(this.getInfo, 5000)\n        },\n\n        beforeDestroy () {\n            clearInterval(this.timer)\n        }\n    }\n</script>\n\n"]},"metadata":{},"sourceType":"module"}